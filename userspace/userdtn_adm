#!/bin/sh
#       userdtn_adm == Start/Stop Daemon Processes for user_dtn
#
# Author:       David Miranda
# Date:         Monday Nov 14 2022
#
#
#######################################################################

USAGE="Usage: userdtn_adm {start | shutdown | stop}"

PATH=$PATH:`pwd`
export PATH

AWK_CMD="/usr/bin/awk"
CLEAR_CMD="/bin/clear"
CAT_CMD="/bin/cat"
CP_CMD="/bin/cp"
GREP_CMD="/bin/grep"
HOSTNAME_CMD="/bin/uname -n"
LN_CMD="/bin/ln"
MKDIR_CMD="/bin/mkdir"
PS_CMD="/bin/ps"
RM_CMD="/bin/rm"
SED_CMD="/bin/sed"
UNAME="/bin/uname"

RESOLV_CONF=/etc/resolv.conf
ETC_HOSTS=/etc/hosts
ETC_SERVICES="/etc/services"

HOSTNAME=`uname -n`

YES=0
NO=1
MAXSTRDBGLVL=9

#set -x         # for debugging this script
# verify superuser status
uid=`id`
uid=`expr "$uid" : 'uid=\([0-9]*\)'`
if [ "${uid:=0}" -ne 0 ]
then
	echo "$0: Permission denied. You must be root or become superuser."
	exit 1
fi

if [ "$1" = start -a "$2" != NO ]; then
# put up message.
echo >&2
echo >&2 "Checking where Im at.
"
echo >&2
fi

# Find the "OS", needed especially for AIX
VERSION=`uname -v`
OS="`uname -s|cut -d' ' -f1`"


RELEASE=`uname -r`  # release of OS

# userdtn_adm should have at least one and not more than 2 arguments
if [ $# -gt 2 -a $# -lt 1 ]
then
	echo ${USAGE}
	exit 1
fi

#if [ `uname -s` = Linux ]
#then
#	alias echo="echo -e"
#fi

#######################################################################
#
# Shell functions used within this script
#
#######################################################################

CONTIN="Press <ENTER> to continue: \c"

PS()
{
	ps -ef
	return 0
}

check_installed()
{
	if [ -d "${INSTALLDIR}" ]
	then :
	else
		echo "Tuning Module is not installed!!"
		exit 1
	fi
	return 0
}

KillNamedProcess()
{
	PS | egrep " $1( |$)" | sed -e '/egrep/d' -e 's/^ *//' > ps.out
	cat ps.out | sed -e 's/ [ ]*/   /g' -e '/rlog/d' | \
	cut -f2 > killpid
	
	if [ ! -s killpid ]
	then
		echo "Process $1 not running"
	else
		pid=`cat killpid`
		# SIGTERM for clean shutdown
		echo "sending SIGTERM to pid(s) ${pid} ($1)"
		/bin/kill ${pid}
	fi
	rm killpid
	rm ps.out
}

CheckNamedProcess()
{
	PS | egrep " $1( |$)" | sed -e '/egrep/d' -e 's/^ *//' > ps.out
	cat ps.out | sed -e 's/ [ ]*/   /g' -e '/rlog/d' | \
	cut -f2 > killpid
	
	if [ ! -s killpid ]
	then
		echo "Process $1 not running"
		rm killpid
		rm ps.out
		sleep 2
		echo
		echo "Tuning Module shutdown completed ..."
		sleep 2
		exit 0
	else
		rm killpid
		rm ps.out
	fi
}

#
# Get a yes or no answer from the user.  Argument 1 is prompt, 2 is default.
#
yorn()
{
        if [ "$2" = "" ] ; then
                prompt="$1? "
        else
                prompt="$1 [$2]? "
        fi

        while true ; do
                echo "$prompt\c"
                read input
                parsed=$input

                if [ "$parsed" = "" ] ; then
                        answer=$2
                else
                        answer=$input
                fi

                case $answer in
                        [yY]|[yY][eE]|[yY][eE][sS])
                                yorn_rsp=0
                                return 0 ; break ;;
                        [nN]|[nN][oO])
                                yorn_rsp=1
                                return 1 ; break ;;
                        *)
                                echo "Please answer yes or no."
                esac
        done
}

#
# get user input
#
termin()
{
    if [ "$2" = "" ] ; then
        prompt="$1? "
    else
        prompt="$1 [$2]? "
    fi

    echo "$prompt\c"
    read input
    answer=$input

    if [ "$answer" = "" ] ; then
        answer=$2
    fi
}

#
# Get a particular parameter from a named package's info file
#    $1 - package name
#    $2 - param name
#
#    paramval -- output param with param's value filled in
#
get_package_param()
{
    paramval=""

    if [ "$1" = "" ] ; then
        echo "get_package_param: no pkgname passed"
    fi

    if [ -f $LPINFODIR/$1.info ] ; then
        paramval=`$AWK_CMD -F= '$1 == search {print $2}' search=$2 $LPINFODIR/$1.info`
#    else
#       echo "get_package_param: info file ($LPINFODIR/$1.info) not found"
    fi


}
#
# Write a particular parameter to a named package's info file
#    $1 - package name
#    $2 - param name
#
#    paramval -- input param with param's value filled in
#
put_package_param()
{

    if [ "$1" = "" ] ; then
                return
    fi

    #
    # if the file doesn't yet exist, create an empty one.  Might also have
    # to create the directory
    #
    if [ ! -f $LPINFODIR/$1.info ] ; then
        if [ ! -d $LPINFODIR ] ; then
            mkdir -p $LPINFODIR
        fi
        touch $LPINFODIR/$1.info
    fi

    if [ -f $LPINFODIR/$1.info ] ; then
        #
        # remove the param if it exists already, then append the new param
                #
                $GREP_CMD -v $2 $LPINFODIR/$1.info > $LPINFODIR/$1.info.new
                if [ $? -eq 0 ]
                then
                        mv $LPINFODIR/$1.info.new $LPINFODIR/$1.info
                        if [ "$paramval" != "" ]
                        then
                                echo "$2=$paramval" >> $LPINFODIR/$1.info
                        fi
                else
                        echo "ERROR:  Unable to create new parameter file."
                        echo "        Configuration change not made"
                        echo ""
                fi
    fi
}


#
#
# MAIN
#
#
   trap 'exit 3' 15

    OS_TYP_VER=`$UNAME -s`-`$UNAME -r`

        #
        # Do system dependent things
        #
        case $OS_TYP_VER in
        Linux-*)
                OS_TYPE="OS_LINUX"
                USERDTNINST_DEF="/usr/tuningmod"
                ;;

        *)
                ;;
        esac

    if [ -f /usr/ucb/whoami ] ; then
       WHO="`/usr/ucb/whoami`"
    else
       if [ -f /usr/bin/whoami ] ; then
          WHO="`/usr/bin/whoami`"
       else
  WHO="`$PS_CMD -f | $GREP_CMD ps | $GREP_CMD -v grep | $AWK_CMD '{print $1}'`"
       fi
    fi

    if [ "$WHO" != "root" ] ; then
        echo "Must be root to run this script, not $WHO"
        exit 1
    fi


#######################################################################
#
# Execution of script starts here.
#
#######################################################################

# examine the first parameter
case "$1" in
'start')        # Start the daemons


        # only one agent may be running on the system at a time
        PS > psef.out
        cat psef.out | egrep "user_dtn( |$)" | sed -e '/egrep/d' > ps.out
        if [ -s ps.out ]
        then
                echo "$0: error - user_dtn is already running:"
                cat ps.out
                exit 1
        fi

        rm psef.out ps.out

        echo
        echo "Tuning Module Startup ..."

        # Start the user_dtn; use -d <debuglevel> for debugging
        user_dtn

        sleep 2
        echo
        echo "Tuning Module Startup Completed"

        exit 0
        ;;


'stop' | 'shutdown')
        #       The stopcdm utility will complete only after
        #       executing the following shell commands.
        #       This ensures that all express daemons have
        #       been killed.

        echo
        echo "TUNING MODULE SHUTDOWN ..."
        CheckNamedProcess user_dtn

        if [ $1 = 'shutdown' ]
        then
                        echo "    Do you still wish to stop the Tuning Module (y/n): "
                        read answer
                        case $answer in
                                 'y' | 'Y')
                                ;;
                        *)
                                exit 1
                        ;;
                        esac
        fi

        # kill the agent daemon
        KillNamedProcess user_dtn

        sleep 2                 # for delay before possible re-start
        echo
        echo "TUNING MODULE SHUTDOWN COMPLETED ..."
        sleep 2                 # for delay before possible re-start
        exit 0
        ;;

*)
        echo ${USAGE}
        exit 1
        ;;
esac

exit 0

#
#####################################################################
# end of userdtn_adm
######################################################################

